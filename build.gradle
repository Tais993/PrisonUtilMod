plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}


group = 'nl.tijsbeek'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'PrisonUtilMod'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

configurations {
    shade
    implementation.extendsFrom shade
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}


minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'PrisonUtilMod'

            mods {
                prisonutilmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'PrisonUtilMod'

            mods {
                prisonutilmod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'PrisonUtilMod'

            mods {
                prisonutilmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'prisonutilmod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                prisonutilmod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
}

dependencies {
    shade 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

    minecraft 'net.minecraftforge:forge:1.18.2-40.1.60'
}

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes([
                "Specification-Title"     : "prisonutilmod",
                "Specification-Vendor"    : "Tijsdieman",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Tijsdieman",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}


shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.fasterxml.jackson.core:jackson-databind:2.13.3', "${project.group}.com.fasterxml.jackson.core:jackson-databind:2.13.3"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
